# bot.py ‚Äî Telegram-–±–æ—Ç —Å –±—ã—Å—Ç—Ä—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–∏–∞–ª–æ–≥–∞ –∏ webhook/polling-—Ä–µ–∂–∏–º–æ–º
import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from token_packer import pack, normalize_tokens

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
LEFT, RIGHT, MINLEN, MAXLEN, SEPARATOR = range(5)


def _auto_wrap_separator(sep: str) -> str:
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª —Å–∫–æ–±–∫–∏ ‚Äî –æ–±–µ—Ä–Ω—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    s = (sep or "").strip()
    if not s:
        return ") * ("
    if "(" not in s and ")" not in s:
        return f"){s}("
    return s


# ======== –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞."""
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω—ã.\n–í–≤–µ–¥–∏ –õ–ï–í–£–Æ —á–∞—Å—Ç—å (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤):"
    )
    return LEFT


async def left_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["left"] = normalize_tokens([update.message.text])
    if not context.user_data["left"]:
        await update.message.reply_text("–õ–µ–≤–∞—è —á–∞—Å—Ç—å –ø—É—Å—Ç–∞—è. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return LEFT
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ü–†–ê–í–£–Æ —á–∞—Å—Ç—å (–ø–ª–∞–≤–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤):")
    return RIGHT


async def right_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["right"] = normalize_tokens([update.message.text])
    if not context.user_data["right"]:
        await update.message.reply_text("–ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –ø—É—Å—Ç–∞—è. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return RIGHT
    await update.message.reply_text("–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 480):")
    return MINLEN


async def minlen_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["min_len"] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 480):")
        return MINLEN
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 512):")
    return MAXLEN


async def maxlen_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["max_len"] = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 512):")
        return MAXLEN
    if context.user_data["min_len"] > context.user_data["max_len"]:
        await update.message.reply_text("min_len –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max_len. –í–≤–µ–¥–∏—Ç–µ max_len –µ—â—ë —Ä–∞–∑:")
        return MAXLEN
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä ')*(' –∏–ª–∏ ')/1(' ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º —Å–∫–æ–±–æ—á–∫–∏):"
    )
    return SEPARATOR


async def separator_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data
    separator = _auto_wrap_separator(update.message.text)
    ud["separator"] = separator

    try:
        results = pack(ud["left"], ud["right"], ud["min_len"], ud["max_len"], separator)
        out_text = ", ".join(results)

        if len(out_text) > 4000:  # –∑–∞–ø–∞—Å –¥–æ 4096
            path = f"result_{update.effective_user.id}.txt"
            with open(path, "w", encoding="utf-8") as f:
                f.write(out_text)
            with open(path, "rb") as f:
                await update.message.reply_document(document=f)
            os.remove(path)
        else:
            await update.message.reply_text(out_text)

        lengths = [f"#{i+1}: {len(c)} —Å–∏–º–≤–æ–ª–æ–≤" for i, c in enumerate(results)]
        await update.message.reply_text("\n".join(lengths))

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚õî –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ LEFT."""
    context.user_data.clear()
    await update.message.reply_text("üîÅ –°–±—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í–≤–µ–¥–∏ –õ–ï–í–£–Æ —á–∞—Å—Ç—å:")
    return LEFT


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –≤ –ª–æ–≥–∞—Ö Render
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled exception", exc_info=context.error)


def build_app() -> Application:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN is not set")

    app = Application.builder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LEFT: [MessageHandler(filters.TEXT & ~filters.COMMAND, left_input)],
            RIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, right_input)],
            MINLEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, minlen_input)],
            MAXLEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, maxlen_input)],
            SEPARATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, separator_input)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("reset", reset),
            CommandHandler("start", start),
        ],
        allow_reentry=True,
        conversation_timeout=600,  # –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ—è
    )

    # –î–æ–±–∞–≤–∏–º /reset –≥–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–Ω —Ä–∞–±–æ—Ç–∞–ª –∏ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    app.add_handler(CommandHandler("reset", start))
    app.add_handler(conv)
    app.add_error_handler(on_error)
    return app


def main():
    app = build_app()
    # –ù–∞ Render –µ—Å—Ç—å RENDER_EXTERNAL_URL –∏ PORT ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook.
    # –õ–æ–∫–∞–ª—å–Ω–æ/–±–µ–∑ URL ‚Äî fallback –Ω–∞ polling.
    base = os.getenv("WEBHOOK_BASE_URL") or os.getenv("RENDER_EXTERNAL_URL")
    port = int(os.getenv("PORT", "10000"))
    path = f"/webhook/{os.getenv('WEBHOOK_PATH', 'tg')}"

    if base:
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=path,
            webhook_url=base.rstrip("/") + path,
        )
    else:
        app.run_polling()


if __name__ == "__main__":
    main()
